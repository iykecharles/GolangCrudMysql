type Values struct {
	Age  int
	Name string
}

func (v Values) Double() int {
	return v.Age * 2
}

func main() {
	v := Values{
		Age:  20,
		Name: "charles",
	}

	templates.ExecuteTemplate(os.Stdout, "home.html", v)
}

package main

import (
	"database/sql"
	"fmt"
	"html/template"
	"log"
	"net/http"

	_ "github.com/go-sql-driver/mysql"
	uuid "github.com/satori/go.uuid"
	"golang.org/x/crypto/bcrypt"
)

type user struct {
	UserName  string
	Password  []byte
	FirstName string
	LastName  string
	Role      string
}

type Product struct {
	CusID   int
	CusName string
	Email   string
	Gender  string
	City    string
	Zipcode string
	Country string
}

var (
	templates = template.Must(template.ParseGlob("template/*"))
)

var db *sql.DB
var dbSession = map[string]string{}
var dbUser = map[string]user{}
var err error

/*
func init() {
	bs, err := bcrypt.GenerateFromPassword([]byte("charles"), bcrypt.MinCost)
	if err != nil {
		log.Println(err)
	}
	dbUser["iykecharles316@yahoo.com"] = user{"iykecharles316@yahoo.com", bs, "charles", "ezema", "backend"}
}
*/

func main() {
	//connection
	var err error
	// Never use _, := db.Open(), resources need to be released with db.Close
	db, err = sql.Open("mysql", "root:charles@tcp(localhost:3306)/charlesdb")
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	http.HandleFunc("/", landingpage)
	http.HandleFunc("/create", create)
	http.HandleFunc("/vault", vault)
	http.HandleFunc("/mainpage", mainpage)
	http.HandleFunc("/signup", signup)
	http.HandleFunc("/login", login)
	http.HandleFunc("/logout", logout)
	http.Handle("/assets/", http.StripPrefix("/assets/", http.FileServer(http.Dir("./assets/"))))
	err = http.ListenAndServe(":8000", nil)
	if err != nil {
		log.Fatalln(err)
	}

}

func landingpage(w http.ResponseWriter, r *http.Request) {
	s := getUser(r)
	templates.ExecuteTemplate(w, "landing.html", s)
}

func create(w http.ResponseWriter, r *http.Request) {
	stmt, err := db.Prepare(`create table person (
		id INT NOT NULL AUTO_INCREMENT,
		names VARCHAR(50) NOT NULL,
		email VARCHAR(150),
		gender VARCHAR(7) NOT NULL,
		city VARCHAR(7) NOT NULL,
		zipcode VARCHAR(7) NOT NULL,
		country_of_birth VARCHAR(50),
		PRIMARY KEY (id)
	);`)
	check(err)
	defer stmt.Close()

	res, err := stmt.Exec()
	check(err)

	n, err := res.RowsAffected()
	check(err)

	fmt.Fprintln(w, "CREATED A TABLE", n)
}

func deleterow(w http.ResponseWriter, r *http.Request) {
	stmt, err := db.Prepare(`DELETE FROM person where name = ?;`)
	check(err)

	res, err := stmt.Exec()
	check(err)

	n, err := res.RowsAffected()
	check(err)

	fmt.Fprintln(w, "DELETED A ROW", n)

}

func mainpage(w http.ResponseWriter, r *http.Request) {
	if !alreadyloggedin(r) {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	// INSERT PROCESS
	if r.Method == http.MethodPost {
		// Formvalues
		r.ParseForm()
		z := &Product{
			CusName : r.FormValue("customername"),
			Email : r.FormValue("email"),
			Gender : r.FormValue("gender"),
			City : r.FormValue("city"),
			Zipcode : r.FormValue("zipcode"),
			Country : r.FormValue("country"),
		}
		

		if z.CusName == "" || z.Email == "" || z.Gender == "" || z.City == "" || z.Zipcode == "" || z.Country == "" {
			templates.ExecuteTemplate(w, "index.html", "some fields are blank")
			fmt.Println("User did not fill in all the required fields in the form")
			return
		}

		/*
		if z.Validate() == false {
		templates.ExecuteTemplate(w, "home.html", "Data was wrongly entered or omitted")
		return
		*/
	}

	// inserting values
	insertstmt := `insert into person (names, email, gender, city, zipcode, country_of_birth) values (?, ?, ?, ?, ?, ?)`
	_, err := db.Exec(insertstmt, z.CusID, z.CusName, z.Email, z.Gender, z.City, z.Zipcode, z.Country)
	if err != nil {
		fmt.Println(err)
		http.Error(w, http.StatusText(500), http.StatusInternalServerError)
		return
	}

		/*

		var ins *sql.Stmt
		ins, err = db.Prepare(`INSERT INTO person (names, email, gender, city, zipcode, country_of_birth) VALUES (?, ?, ?, ?, ?, ?)`)
		check(err)
		defer ins.Close()

		res, err := ins.Exec(z.CusName, z.Email, z.Gender, z.City, z.Zipcode, z.Country)
		check(err)

		n, err := res.RowsAffected()
		check(err)

		fmt.Fprintln(w, "ADDED A ROW OF INFORMATION", n)
		fmt.Println(w, "ADDED A ROW OF INFORMATION", n)
		http.Redirect(w, r, "vault.html", http.StatusSeeOther)
		return
	*/
	}
	
	/*
		s := getUser(r)
		if s.Role != "backend" {
			http.Error(w, "you must be a backend developer to access this infromation", http.StatusForbidden)
			return
		}
	*/
	templates.ExecuteTemplate(w, "index.html", "Product Successfully Inserted")
}

func vault(w http.ResponseWriter, r *http.Request) {

	smt := `SELECT * FROM person`
	rows, err := db.Query(smt)
	check(err)

	defer rows.Close()

	var products []Product
	for rows.Next() {
		var z Product
		err = rows.Scan(&z.CusID, &z.CusName, &z.Email, &z.Gender, &z.City, &z.Zipcode, &z.Country)
		check(err)

		products = append(products, z)
	}

	templates.ExecuteTemplate(w, "vault.html", products)
}

func signup(w http.ResponseWriter, r *http.Request) {
	if alreadyloggedin(r) {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	if r.Method == http.MethodPost {
		// formvalues
		un := r.FormValue("username")
		p := r.FormValue("password")
		f := r.FormValue("firstname")
		l := r.FormValue("lastname")
		ro := r.FormValue("role")

		// session
		id, err := uuid.NewV4()
		if err != nil {
			log.Println(err)
		}
		c := &http.Cookie{
			Name:  "charlescookie",
			Value: id.String(),
			Path:  "/",
		}
		http.SetCookie(w, c)

		// username exist?
		if _, ok := dbUser[un]; ok {
			http.Error(w, "username exist already", http.StatusForbidden)
			return
		}

		// interaction
		// encrypt password using bcrypt
		bs, err := bcrypt.GenerateFromPassword([]byte(p), bcrypt.MinCost)
		if err != nil {
			http.Error(w, "internal server error", http.StatusInternalServerError)
			return
		}

		dbSession[c.Value] = un
		u := user{un, bs, f, l, ro}
		dbUser[un] = u

		http.Redirect(w, r, "/login", http.StatusSeeOther)
		return

	}

	templates.ExecuteTemplate(w, "signup.html", nil)
}

func login(w http.ResponseWriter, r *http.Request) {

	if !alreadyloggedin(r) {
		http.Redirect(w, r, "/signup", http.StatusSeeOther)
		return
	}

	if r.Method == http.MethodPost {

		// formvalues
		un := r.FormValue("username")
		p := r.FormValue("password")

		// check if user exist
		u, ok := dbUser[un]
		if !ok {
			http.Error(w, "username deosnt match", http.StatusForbidden)
			return
		}

		// password exist?
		err := bcrypt.CompareHashAndPassword(u.Password, []byte(p))
		if err != nil {
			http.Error(w, "passwords do not match", http.StatusForbidden)
			return
		}

		// create a session
		id, err := uuid.NewV4()
		if err != nil {
			log.Println(err)
		}
		c := &http.Cookie{
			Name:  "charlescookie",
			Value: id.String(),
			Path:  "/",
		}
		http.SetCookie(w, c)

		// the interaction
		dbSession[c.Value] = un
		dbUser[un] = u

		http.Redirect(w, r, "/mainpage", http.StatusSeeOther)
		return

	}
	templates.ExecuteTemplate(w, "login.html", nil)
}

func logout(w http.ResponseWriter, r *http.Request) {
	if alreadyloggedin(r) {
		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}

	// delete session
	c, _ := r.Cookie("charlescookie")
	delete(dbSession, c.Value)

	// deactivate cookie so value is emply string and MaxAge = -1
	c = &http.Cookie{
		Name:   "charlescookie",
		Value:  "",
		MaxAge: -1,
	}
	http.SetCookie(w, c)

	http.Redirect(w, r, "/login", http.StatusSeeOther)
	return

}

func check(err error) {
	if err != nil {
		fmt.Println(err)
	}
}
